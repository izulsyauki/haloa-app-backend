// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profiles?
  threads   Threads[]
  follower  Follows[] @relation("follower")
  following Follows[] @relation("following")
  like      Likes[]
}

model Profiles {
  id       Int     @id @default(autoincrement())
  fullName String?
  avatar   String?
  banner   String?
  bio      String?

  userId Int   @unique
  user   Users @relation(fields: [userId], references: [id])
}

model Threads {
  id           Int           @id @default(autoincrement())
  userId       Int
  content      String?
  mainThreadId Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  media        ThreadMedia[]

  like       Likes[]
  user       Users     @relation(references: [id], fields: [userId])
  mainThread Threads?  @relation("ThreadReplies", references: [id], fields: [mainThreadId])
  replies    Threads[] @relation("ThreadReplies")
}

model ThreadMedia {
  id       Int    @id @default(autoincrement())
  url      String
  threadId Int

  thread Threads @relation(references: [id], fields: [threadId])
}

model Follows {
  follower    Users @relation("follower", references: [id], fields: [followerId])
  followerId  Int
  following   Users @relation("following", references: [id], fields: [followingId])
  followingId Int

  @@id([followingId, followerId])
}

model Likes {
  threadId Int
  userId   Int

  thread Threads @relation(references: [id], fields: [threadId])
  user   Users   @relation(references: [id], fields: [userId])

  @@id([threadId, userId])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
